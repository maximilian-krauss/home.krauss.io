{{#> layout title="Sensordata - Krausshalt"}}

{{#*inline "body"}}

<div class="Box Box--condensed m-2 mb-3">
  <div class="Box-header d-flex flex-items-center" >
    <a class="btn btn-sm mr-3" href="/" >
        Back
    </a>
    <h2 class="Box-title">
      {{current.alias}}
      <span class="Counter Counter--gray-dark" title="{{current.battery}}% battery left">{{current.battery}}%</span>
    </h2>
  </div>
  <div class="Box-row">
    <div class="container-lg clearfix">
      <div class="col-6 float-left border-right p-2">
        <h2 class="text-center">{{current.temperature}}Â°C</h2>
      </div>
        {{#if current.isDoorSensor }}
        <div class="col-6 float-right p-2">
          <h2 class="text-center">{{current.state}}</h2>
        </div>
        {{else}}
        <div class="col-6 float-right p-2">
          <h2 class="text-center">{{current.humidity}}%</h2>
        </div>
        {{/if}}
    </div>
  </div>
  <div class="Box-footer">
    <span class="Counter--gray-dark" >
      <span class="text-bold">Last update: </span><span class="date-time" title="{{current.last_update}}" data-time="{{current.last_update}}"></span>
    </span>
  </div>
</div>

<div class="Box Box--condensed m-2 mb-3">
  <div class="Box-header">
    <h2 class="Box-title">Temperature History</h2>
  </div>
  <div class="Box-row">
    <div class="container-lg clearfix">
      <div class="col-12 float-left p-2">
        <canvas id="temperature-chart" width="400" height="200"></canvas>
      </div>
    </div>
  </div>
</div>

{{#if current.isDoorSensor }}
<!-- Lock/Unlock history will go here -->
<div class="Box Box--condensed m-2 mb-3">
  <div class="Box-header">
    <h2 class="Box-title">Events</h2>
  </div>
  <div class="Box-row">
    <div class="container-lg clearfix">
      <div class="col-12 float-left p-2">
        {{#each stateEvents}}
        {{#if isClosed }}
        <div class="TimelineItem">
          <div class="TimelineItem-badge">
            <svg class="octicon" viewBox="2 2 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"></path></svg>
          </div>

          <div class="TimelineItem-body">
            State changed to <span class="text-bold">CLOSED</span>
            <span class="date-time link-gray" title="{{timestamp}}" data-time="{{timestamp}}"></span>
          </div>
        </div>
        {{else}}
        <div class="TimelineItem">
          <div class="TimelineItem-badge">
            <svg class="octicon" viewBox="2 2 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M10 2a5 5 0 00-5 5v2a2 2 0 00-2 2v5a2 2 0 002 2h10a2 2 0 002-2v-5a2 2 0 00-2-2H7V7a3 3 0 015.905-.75 1 1 0 001.937-.5A5.002 5.002 0 0010 2z"></path></svg>
          </div>

          <div class="TimelineItem-body">
            State changed to <span class="text-bold">OPEN</span>
            <span class="date-time link-gray" title="{{timestamp}}" data-time="{{timestamp}}"></span>
          </div>
        </div>
        {{/if}}
        {{/each}}
      </div>
    </div>
  </div>
</div>
{{else}}
<div class="Box Box--condensed m-2 mb-3">
  <div class="Box-header">
    <h2 class="Box-title">Humidity History</h2>
  </div>
  <div class="Box-row">
    <div class="container-lg clearfix">
      <div class="col-12 float-left p-2">
        <canvas id="humidity-chart" width="400" height="200"></canvas>
      </div>
    </div>
  </div>
</div>
{{/if}}

<script type="text/javascript">
  const sensorData = JSON.parse('{{{historyJson}}}')
  const sensor = JSON.parse('{{{sensorJson}}}')

  function createChart(elementId, property, options, dataOptions) {
    const ctx = document.getElementById(elementId)
    const propertyData = sensorData
      .filter(item => item.property === property)
      .map(item => ({...item, value: Number.parseFloat(item.value)}))

    const data = { 
      labels: propertyData.map(d => Date.parse(d.timestamp)), 
      datasets: [{
        ...dataOptions,
        data: propertyData.map(d => ({ t: Date.parse(d.timestamp), y: d.value })),
        borderWidth: 1,
        fill: true,
        pointRadius: 1.5,
        lineTension: 0.1
      }]
    }

    new Chart(ctx, { type: 'line', data, options: { ...options }})
  }

  const buildData = function() {
    const ctxTemperature = document.getElementById('temperature-chart')
    const ctxHumidity = document.getElementById('humidity-chart')
    const options = { 
      responsive: true, 
      legend: { display: false },
      tooltips: { 
        enabled: true,
        intersect: false,
        cornerRadius: 0,
        callbacks: {
          title: function(tooltipItem, data) {
            const [{label}] = tooltipItem
            return moment(label).format('DD.MM. HH:mm')
          }
        }
      },
      scales: {
            xAxes: [{
                type: 'time',
                time: { unit: 'day' },
                ticks: { display: true },
                gridLines: { display: false }
            }],
          yAxes: [{ gridLines: { display: false } }]
      }
    }
    
    createChart(
      'temperature-chart',
      'temperature',
      options,
      { label: 'Temperature', borderColor: 'rgba(152, 202, 255, 1)', backgroundColor: 'rgba(243, 249, 255, 1)' }
    )
    if(!sensor.isDoorSensor) {
      createChart(
        'humidity-chart',
        'humidity',
        options,
        { label: 'Humidity', borderColor: 'rgba(255, 65, 54, 1)', backgroundColor: 'rgba(255, 65, 54, 0.2)' }
      )
    }
  }

  const documentReady = function() {
    buildData()
  }
  document.addEventListener("document-ready", documentReady)

</script>

{{/inline}}

{{/layout}}
