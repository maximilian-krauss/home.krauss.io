{{#> layout title="Sensordata - Krausshalt"}}

{{#*inline "body"}}

<div class="Box Box--condensed m-2 mb-3">
  <div class="Box-header d-flex flex-items-center" >
    <a class="btn btn-sm mr-3" href="/" >
        Back
    </a>
    <h2 class="Box-title">
      {{current.alias}}
      <span class="Counter Counter--gray-dark" title="{{current.battery}}% battery left">{{current.battery}}%</span>
    </h2>
  </div>
  <div class="Box-row">
    <div class="container-lg clearfix">
      <div class="col-6 float-left border-right p-2">
        <h2 class="text-center">{{current.temperature}}Â°C</h2>
      </div>
      <div class="col-6 float-right p-2">
        <h2 class="text-center">{{current.humidity}}%</h2>
      </div>
    </div>
  </div>
  <div class="Box-footer">
    <span class="Counter--gray-dark" >
      <span class="text-bold">Last update: </span><span class="date-time" title="{{current.last_update}}" data-time="{{current.last_update}}"></span>
    </span>
  </div>
</div>

<div class="Box Box--condensed m-2 mb-3">
  <div class="Box-header">
    <h2 class="Box-title">Temperature History</h2>
  </div>
  <div class="Box-row">
    <div class="container-lg clearfix">
      <div class="col-12 float-left p-2">
        <canvas id="temperature-chart" width="400" height="200"></canvas>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  const sensorData = JSON.parse('{{{historyJson}}}')

  const createChart = function() {
    const ctx = document.getElementById('temperature-chart')
    const data = { 
      labels: sensorData.map(d => Date.parse(d.timestamp)), 
      datasets: [{
        label: 'Temperature',
        data: sensorData.map(d => ({ t: Date.parse(d.timestamp), y: d.temperature })),
        borderWidth: 1,
        borderColor: 'rgba(152, 202, 255, 1)',
        fill: true,
        pointRadius: 0,
        backgroundColor: 'rgba(243, 249, 255, 1)',
        lineTension: 0.1
      }]
    }
    const options = { 
      responsive: true, 
      legend: { display: false },
      tooltips: { 
        enabled: true,
        intersect: false,
        cornerRadius: 0,
        callbacks: {
          title: function(tooltipItem, data) {
            const [{label}] = tooltipItem
            return moment(label).format('DD.MM. HH:mm')
          }
        }
      },
      scales: {
            xAxes: [{
                type: 'time',
                time: { unit: 'day' },
                ticks: {
                    display: true
                },
                gridLines: {
                  display: false
                }
            }],
          yAxes: [{
            gridLines: {
                display: false
            }
          }]
      }
    }
    new Chart(ctx, { type: 'line', data, options})
  }

  const documentReady = function() {
    const dateTimeElements = document.getElementsByClassName('date-time')
    for(const element of dateTimeElements) {
      const parsedDate = moment(element.getAttribute('data-time')).local()
      const difference = parsedDate.diff(moment())
      const duration = moment.duration(difference).humanize()
      element.innerHTML = `${duration} ago`
    }
    createChart()
  }

  if (document.readyState === "complete" || (document.readyState !== "loading" && !document.documentElement.doScroll)) {
    documentReady();
  } else {
    document.addEventListener("DOMContentLoaded", documentReady);
  }

</script>

{{/inline}}

{{/layout}}
